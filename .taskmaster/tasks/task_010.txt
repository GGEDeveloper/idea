# Task ID: 10
# Title: [REQUER REVIS√ÉO] Implement Product Detail Page Structure (Guest & Authenticated Views)
# Status: in-progress
# Dependencies: 2, 3, 49
# Priority: high
# Description: Create the basic layout for the Product Detail Page, including sections for image gallery, description, technical tables, variations, price, stock, and action buttons. **Ensure prices, stock, and restricted commercial information are only visible to authenticated users.**
# Details:
Placeholder content for initial setup, with dynamic data sourced from PostgreSQL. Implement logic to conditionally display/hide price, stock, and other restricted commercial data based on user authentication status. **This implementation requires constant validation against the new schema. Product search by ID (now `ean`), related data queries (images, variants), and permission logic are all impacted by the reformulation.**

# Test Strategy:
Verify page loads with correct layout. Test visibility of prices/stock for both authenticated and unauthenticated users. **Crucially, validate data fetching and display against the new product schema, ensuring correct product retrieval by `ean`, accurate display of related data (images, variants), and proper application of permission logic.**

# Subtasks:
## 1. Implement Basic Product Detail Page Layout & Geko API Integration [pending]
### Dependencies: None
### Description: Create the foundational Next.js page structure for the product detail page. Implement server-side data fetching using `getServerSideProps` or `getStaticProps` (with revalidation) to retrieve product data from the Geko API, **specifically adapting to search by `ean` and handling new schema for related data like images and variants.** Define the main layout areas (header, product info section, related products, footer).
### Details:
Use Next.js for routing and page creation. Integrate with Geko API for product data. Consider PostgreSQL (Neo) for potential data caching or specific product attributes. **Ensure data fetching aligns with the new product schema, particularly for product identification by `ean` and retrieval of associated images and variants.**

## 2. Develop Core Product Information & Media Components [pending]
### Dependencies: 10.1
### Description: Implement reusable React components for displaying product details. This includes the image gallery (with multiple views/zoom), detailed product description, technical specifications tables, and basic pricing information. **Ensure components correctly consume and display data according to the new schema, especially for images and variants.** Ensure components are designed for internationalization.
### Details:
Create `ImageGallery`, `ProductDescription`, `TechnicalSpecsTable` components. Focus on responsive design and accessibility. Prepare for i18n integration. **Verify components correctly render data fetched based on the new schema for images and variants.**

## 3. Integrate Auth.js/Clerk for User Authentication & Permission System [pending]
### Dependencies: 10.1
### Description: Set up Auth.js/Clerk for user authentication on the product detail page. Integrate with the backend permission system (potentially via Geko API or a separate service) to retrieve user roles and permissions relevant to viewing commercial information and specific product data. **Validate that the permission logic aligns with any changes introduced by the new schema or backend reformulation.**
### Details:
Configure Auth.js/Clerk for session management. Define and fetch user permissions based on roles. Ensure secure handling of authentication tokens. **Confirm that the permission fetching and interpretation logic is compatible with the updated backend permission system and new schema requirements.**

## 4. Implement Conditional Content Display Logic for User Roles [pending]
### Dependencies: 10.2, 10.3
### Description: Apply conditional rendering logic to display or hide specific product information (e.g., pricing, commercial details, 'add to cart' button, restricted technical data) based on the user's authentication status (guest vs. authenticated) and their assigned permissions. **Ensure this logic is robust and correctly interprets permissions as defined by the reformulated system.** Ensure appropriate fallback messages or calls to action for guest users.
### Details:
Use React's conditional rendering. Implement logic to check `session` and `permissions` objects. Handle different UI states for authenticated vs. guest users. **Thoroughly test conditional rendering against various user roles and permission sets, especially considering any changes in how permissions are structured or interpreted due to the reformulation.**

## 5. Implement Internationalization, Logging, Automated Tests & Vercel Deployment Prep [pending]
### Dependencies: 10.4
### Description: Integrate i18n for all static and dynamic text on the product detail page. Implement comprehensive logging for data fetching, errors, and user interactions. Write automated unit and integration tests for components and data fetching logic, **with particular emphasis on validating data integrity and conditional display based on the new schema and permission logic.** Prepare the Next.js application for cloud-native deployment on Vercel.
### Details:
Use `next-i18next` or similar for internationalization. Integrate a logging library (e.g., Pino). Write Jest/React Testing Library tests. Configure Vercel deployment settings and environment variables. **Ensure test coverage includes scenarios for product retrieval by `ean`, correct display of related data (images, variants) from the new schema, and accurate application of permission-based content visibility.**

