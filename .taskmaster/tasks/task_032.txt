# Task ID: 32
# Title: Implement Product Management (Admin)
# Status: in-progress
# Dependencies: None
# Priority: high
# Description: Develop a comprehensive module in the Admin Area for managing products, categories, variations, and product images (CRUD operations).
# Details:
User-friendly interface for product data entry, with all product information managed in PostgreSQL.

# Test Strategy:
Verify products, categories, and variations can be created, read, updated, and deleted.

# Subtasks:
## 1. Backend: Implement Core Product CRUD (API & DB) [pending]
### Dependencies: None
### Description: Design and implement the database schema for products in PostgreSQL. Develop backend API endpoints (POST, GET, PUT, DELETE) for creating, reading, updating, and deleting product records. Include validation, error handling, and logging.
### Details:


## 2. Backend: Implement Category CRUD with Hierarchy Support [pending]
### Dependencies: None
### Description: Develop the API endpoints and database schema for managing product categories, including support for hierarchical (parent-child) structures. Implement full CRUD operations.
### Details:


## 3. Backend: Implement Product Variation CRUD [pending]
### Dependencies: None
### Description: Extend the product schema and API to support product variations (e.g., size, color). Implement CRUD endpoints for variations, ensuring they are correctly linked to parent products and can manage attributes.
### Details:


## 4. Backend: Implement Dedicated Stock Management API for Variations [pending]
### Dependencies: None
### Description: Create dedicated and explicit API endpoints (e.g., GET /api/products/variants/{variantId}/stock, PUT /api/products/variants/{variantId}/stock) to manually view and update the stock quantity for each specific product variation (SKU). This is a critical fix.
### Details:


## 5. Backend: Implement Image Management (Upload, Link, Delete) [pending]
### Dependencies: None
### Description: Implement functionality for uploading, storing, and retrieving product and variation images. Develop API endpoints for image operations (upload, delete, reorder) and ensure images are correctly associated with products/variations.
### Details:


## 6. Backend: Implement Bulk Product Import/Export [pending]
### Dependencies: None
### Description: Develop backend features for bulk import/export of products and their variations from/to CSV files, including data validation and error reporting.
### Details:


## 7. Frontend: Create Product Listing View with Search & Filters [pending]
### Dependencies: None
### Description: Design and develop the main view for the admin panel to list all products in a table. Implement search, filtering, and pagination controls to easily find products.
### Details:


## 8. Frontend: Build Product Create/Edit Form [pending]
### Dependencies: None
### Description: Build the React/Next.js form for creating and editing a product. The form should include fields for all product attributes, category selection, and sections for managing variations and images.
### Details:


## 9. Frontend: Build UI for Manual Stock Quantity Management [pending]
### Dependencies: None
### Description: Inside the product edit form, create a clear and intuitive UI section to list all product variations. Each variation must have an input field to view and directly update its stock quantity.
### Details:


## 10. Frontend: Build Image Gallery Management UI [pending]
### Dependencies: None
### Description: Develop an image gallery manager component within the product form. It should allow uploading new images, deleting existing ones, and reordering them via drag-and-drop.
### Details:


## 11. Integration: Connect UI to APIs & Secure Admin Module [pending]
### Dependencies: None
### Description: Connect all frontend UI components to their respective backend API endpoints. Ensure the entire admin product management module is protected by authentication (user must be logged in) and authorization (user must have 'admin' role).
### Details:


