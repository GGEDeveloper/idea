# Task ID: 6
# Title: Develop Product Listing Page Structure (Guest & Authenticated Views)
# Status: done
# Dependencies: 2, 3, 49
# Priority: high
# Description: Re-validate and update the Product Listing (Catalog) Page (`ProductsPage.jsx`) to align with the new database schema and integrate with the updated RBAC system. This includes ensuring product data fetching uses the new `product-queries.cjs` and that price, stock, and restricted commercial information are correctly hidden from visitors or users without specific permissions via `AuthContext`.
# Details:
The previous implementation of the Product Listing Page has been invalidated due to database reformulation. This task involves: 
1. Validating the existing `ProductsPage.jsx` against the new database schema.
2. Ensuring product data fetching strictly utilizes the new `product-queries.cjs`.
3. Confirming that the display logic for prices, stock, and other restricted commercial data is fully integrated with the new RBAC system via `AuthContext`, correctly hiding information from guests or unauthorized users.
4. Adapting existing components and logic to consume data from the new schema and queries.

# Test Strategy:
Verify `ProductsPage.jsx` loads correctly with the new data structure. Test product data fetching using `product-queries.cjs` for various scenarios (success, error). Thoroughly test the visibility of prices, stock, and other commercial data for:
- Unauthenticated users (guests).
- Authenticated users without specific commercial permissions.
- Authenticated users with relevant commercial permissions (e.g., `canViewWholesalePrice`).
Ensure all conditional rendering based on `AuthContext` is robust.

# Subtasks:
## 1. Setup Base HTML Structure & CSS Reset [done]
### Dependencies: None
### Description: Establish the foundational HTML document for the product listing page, including basic head elements, body structure, and link to a global stylesheet. Apply a standard CSS reset to ensure consistent rendering across browsers.
### Details:
Create `index.html` or equivalent. Define main `div` for app. Link `styles.css`. Add basic CSS reset rules (e.g., box-sizing, margin/padding reset). Timestamp: [YYYY-MM-DDTHH:MM:SS]

## 2. Implement Core Product Card UI [done]
### Dependencies: 6.1
### Description: Develop the reusable UI component for a single product item, including placeholders for image, product title, and a basic price display. Focus on semantic HTML and initial styling.
### Details:
Create `ProductCard.js` (or equivalent component file). Define HTML structure for image (`<img>`), title (`<h2>`), and price (`<p>`). Apply basic CSS for layout and appearance. Timestamp: [YYYY-MM-DDTHH:MM:SS]

## 3. Create Product Grid Layout Component [done]
### Dependencies: 6.1, 6.2
### Description: Build the container component responsible for arranging multiple product cards in a responsive grid or flexbox layout. Ensure proper spacing and alignment.
### Details:
Create `ProductGrid.js`. Implement CSS Grid or Flexbox properties to display `ProductCard` instances. Ensure responsiveness for different screen sizes. Timestamp: [YYYY-MM-DDTHH:MM:SS]

## 4. Update Product Data Fetching Module for New Schema & Queries [done]
### Dependencies: None
### Description: Refactor the service or hook responsible for making API calls to retrieve product data. Ensure it uses the new `product-queries.cjs` and correctly processes data according to the new database schema. Include robust error handling.
### Details:
Modify `productService.js` (or data fetching hook). Update data fetching logic to utilize functions from `product-queries.cjs`. Adapt data parsing and mapping to match the new product data schema. Implement `try-catch` for network and data parsing errors. Timestamp: [YYYY-MM-DDTHH:MM:SS]

## 5. Re-implement Guest User Display Logic with AuthContext [done]
### Dependencies: 6.3, 6.4
### Description: Update the logic to render the product listing page for unauthenticated users. This involves using the `AuthContext` to determine guest status and ensuring only basic product information (image, title) is displayed, with all commercial details (price, stock, etc.) correctly hidden.
### Details:
In `ProductsPage.jsx` (or equivalent), consume `AuthContext` to check user authentication status. If guest, ensure only non-commercial product data is passed to `ProductCard` components or that `ProductCard` itself conditionally hides commercial elements based on an `isGuest` prop derived from `AuthContext`. Timestamp: [YYYY-MM-DDTHH:MM:SS]

## 6. Re-implement Authenticated User Display Logic with AuthContext [done]
### Dependencies: 6.5
### Description: Extend and update the product card rendering to include additional commercial details (e.g., discount badges, stock status, 'Add to Cart' button) when an authenticated user is detected via `AuthContext`.
### Details:
Modify `ProductCard.js` to conditionally render additional elements based on an `isAuthenticated` prop (derived from `AuthContext`). Update `ProductsPage.jsx` to pass full product data and authentication status for authenticated users. Timestamp: [YYYY-MM-DDTHH:MM:SS]

## 7. Integrate RBAC Permissions for Commercial Data via AuthContext [done]
### Dependencies: 6.6
### Description: Connect the display of specific commercial information (e.g., wholesale pricing, special offers) to the new RBAC system, ensuring visibility only for authorized user roles as determined by `AuthContext` permissions.
### Details:
In `ProductCard.js` or `ProductsPage.jsx`, use permission checks (e.g., `user.hasPermission('canViewWholesalePrice')` from `AuthContext`) to control visibility of sensitive commercial data. Ensure granular control based on user roles and permissions. Timestamp: [YYYY-MM-DDTHH:MM:SS]

## 8. Add Logging for Data & Permission Flows [done]
### Dependencies: 6.4, 6.5, 6.6, 6.7
### Description: Implement comprehensive logging for product data fetching success/failure (especially with `product-queries.cjs`), user authentication status changes, and RBAC permission check outcomes to aid debugging and monitoring.
### Details:
Integrate a logging library (e.g., console, custom logger). Log API request/response from `product-queries.cjs`, authentication state transitions from `AuthContext`, and specific RBAC permission service calls. Timestamp: [YYYY-MM-DDTHH:MM:SS]

## 9. Write Unit Tests for New Data & RBAC Logic [done]
### Dependencies: 6.2, 6.3, 6.5, 6.6, 6.7
### Description: Develop or update unit tests for the `ProductCard` and `ProductGrid` components, focusing on their interaction with the new data schema. Crucially, write tests for the conditional display logic for guest/authenticated users and permission-based visibility, ensuring correct integration with `AuthContext` and `product-queries.cjs`.
### Details:
Use a testing framework (e.g., Jest, React Testing Library). Write tests for component rendering with new data structures, prop handling, conditional UI elements based on `AuthContext` state, and permission-driven display. Mock `product-queries.cjs` responses and `AuthContext` values for comprehensive testing. Timestamp: [YYYY-MM-DDTHH:MM:SS]

## 10. Implement i18n & A11y for Product Listing [done]
### Dependencies: 6.2, 6.3, 6.5, 6.6
### Description: Integrate internationalization (i18n) for all user-facing text on the product listing page and ensure accessibility (a11y) standards are met, including ARIA attributes and keyboard navigation.
### Details:
Replace hardcoded strings with i18n keys. Add `alt` attributes to images, `aria-label` where necessary, and ensure keyboard focus/navigation for interactive elements. Timestamp: [YYYY-MM-DDTHH:MM:SS]

