# Task ID: 8
# Title: Implement Product Listing Sorting Functionality
# Status: pending
# Dependencies: 6, 49
# Priority: medium
# Description: The original implementation for product listing sorting has been invalidated. This task focuses on completely revalidating and re-implementing the sorting functionality, especially for price. The new objective is to ensure frontend sorting options correctly construct parameters for new API queries and to implement strict backend and frontend logic so that the 'sort by price' option is only visible and functional for authenticated users with the correct permissions, utilizing `AuthContext`.
# Details:
Sorting logic must now primarily reside on the backend, with the frontend responsible for constructing and sending the correct query parameters to the API. Backend implementation should leverage PostgreSQL for efficient data retrieval and sorting. Strict permission checks for price sorting must be enforced on both frontend (visibility) and backend (functionality).

# Test Strategy:
Verify that sorting options correctly translate into API query parameters. Thoroughly test the 'sort by price' option: ensure it is not visible or functional for unauthenticated users or users without the correct permissions. Verify it functions correctly for authenticated users with the required permissions. Test all other sorting options for accuracy.

# Subtasks:
## 1. Implement Sorting UI Components [done]
### Dependencies: None
### Description: Develop and integrate user interface elements (e.g., dropdowns, buttons) for various sorting options (e.g., price, name, date) within the product listing page. Ensure responsiveness and user-friendliness using Next.js/React.
### Details:
Frontend: Next.js/React. Integrate with existing product listing component. Consider internationalization for sorting labels.

## 2. Develop Core Sorting Logic [done]
### Dependencies: 8.1
### Description: Implement the core sorting algorithms and data manipulation logic to reorder product listings based on selected criteria (e.g., ascending/descending price, alphabetical name). This involves processing data fetched from the API Geko.
### Details:
Logic to be implemented on the frontend after data retrieval from API Geko. Ensure efficient sorting for potentially large datasets. Include automated tests for sorting accuracy.

## 3. Integrate Auth.js/Clerk for Price Sorting Restrictions [done]
### Dependencies: 8.1, 8.2
### Description: Implement logic to restrict or modify price sorting options based on user authentication status (e.g., only authenticated users can sort by price, or different price sorting options for premium users). Utilize Auth.js/Clerk for authentication checks.
### Details:
Use Auth.js/Clerk for user session management and role-based access control. Ensure proper error handling and UI feedback for unauthorized attempts. Include automated tests for permission enforcement.

## 4. Re-evaluate and Adapt Frontend Sorting UI for New API Queries [pending]
### Dependencies: None
### Description: Review the existing sorting UI components (from subtask 1) and adapt them to construct and send the correct query parameters to the new backend API endpoints for sorting. Ensure all sorting options (name, relevance, price) correctly map to API parameters.
### Details:
Focus on parameter mapping and API integration. This supersedes the previous client-side sorting logic (from subtask 2) by shifting the responsibility to the backend API.

## 5. Implement Backend API Endpoints for Parameterized Product Sorting [pending]
### Dependencies: None
### Description: Develop or modify backend API endpoints to accept sorting parameters (e.g., `sortBy`, `sortOrder`) and return product listings sorted according to these parameters. Leverage PostgreSQL for efficient database-level sorting.
### Details:
Ensure API endpoints are robust, handle various sorting criteria, and are optimized for performance. Implement proper input validation for sorting parameters.

## 6. Re-implement Strict Price Sorting Visibility and Functionality (Frontend & Backend) [pending]
### Dependencies: 8.4, 8.5
### Description: Implement strict logic on both the frontend and backend to ensure the 'sort by price' option is only visible and functional for authenticated users with the correct permissions, utilizing `AuthContext` for permission checks. This re-validates and strengthens the restrictions previously attempted in subtask 3.
### Details:
Frontend: Hide/disable the price sorting option if the user is not authenticated or lacks permission. Backend: Reject API requests for price sorting if the user is not authenticated or lacks permission. Implement robust error handling and user feedback.

## 7. Conduct End-to-End Testing and Validation of Sorting Functionality [pending]
### Dependencies: 8.4, 8.5, 8.6
### Description: Perform comprehensive end-to-end testing to validate all sorting options, focusing on the correct interaction between frontend UI, API parameter construction, backend sorting logic, and especially the strict permission-based access for price sorting.
### Details:
Test cases should cover: all sorting criteria (name, relevance, price asc/desc), authenticated vs. unauthenticated users, users with/without price sorting permissions, edge cases, and performance under various data loads.

